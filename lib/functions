#!/bin/bash

# Create a base64 data URL from an image
dataurl() {
	echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Formats unix timestamp
function todate {
    perl -e "require 'ctime.pl'; print &ctime($1);"
}

# Creates fake file (0's) of $1 MB
function mkfake {
    perl -e "print '0' x 1024 x 1024 x $1" > $1-MB-fake-file.txt
}

# Creates new dir and cd's into it
function makeopen {
	mkdir $1 && cd $1
}

# Trash file or dir to user .Trash
function saferm {
	mv -f "$@" ~/.Trash
}

# Copy file to clipboard
function copytoclipboard {
	cat $1 | pbcopy
}


# Favicon and Apple Touch Icon Generator
#
# This bash script takes an image as a parameter, and uses ImageMagick to convert it to several
# other formats used on modern websites. The following copies are generated:
# 
# * apple-touch-icon-114x114-precomposed.png
# * apple-touch-icon-57x57-precomposed.png
# * apple-touch-icon-72x72-precomposed.png
# * apple-touch-icon-precomposed.png
# * apple-touch-icon.png
# * favicon.ico
#
# Concept from http://bergamini.org/computers/creating-favicon.ico-icon-files-with-imagemagick-convert.html
function appletouchicons {
	CONVERT_CMD=`which convert`
	SRC_IMAGE=$1
	PWD=`pwd`

	if [ -z $CONVERT_CMD ] || [ ! -f $CONVERT_CMD ] || [ ! -x $CONVERT_CMD ];
	then
	    echo "ImageMagick needs to be installed to run this script"
	    exit;
	fi

	if [ -z $SRC_IMAGE ]; then
		echo "You must supply a source image as the argument to this command."
		exit;
	fi

	if [ ! -f $SRC_IMAGE ]; then
	    echo "Source image \"$SRC_IMAGE\" does not exist."
	    exit;
	fi

	echo "Generating square base image"
	$CONVERT_CMD $SRC_IMAGE -resize 256x256! -transparent white $PWD/favicon-256.png

	echo "Generating various sizes for ico"
	$CONVERT_CMD $PWD/favicon-256.png -resize 16x16 $PWD/favicon-16.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 32x32 $PWD/favicon-32.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 64x64 $PWD/favicon-64.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 128x128 $PWD/favicon-128.png

	echo "Generating ico"
	$CONVERT_CMD $PWD/favicon-16.png $PWD/favicon-32.png $PWD/favicon-64.png $PWD/favicon-128.png $PWD/favicon-256.png -colors 256 $PWD/favicon.ico

	echo "Generating touch icons"
	$CONVERT_CMD $PWD/favicon-256.png -resize 57x57 $PWD/apple-touch-icon.png
	cp $PWD/apple-touch-icon.png $PWD/apple-touch-icon-precomposed.png
	cp $PWD/apple-touch-icon.png $PWD/apple-touch-icon-57x57-precomposed.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 72x72 $PWD/apple-touch-icon-72x72-precomposed.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 114x114 $PWD/apple-touch-icon-114x114-precomposed.png

	echo "Removing temp files"
	rm -rf $PWD/favicon-16.png
	rm -rf $PWD/favicon-32.png
	rm -rf $PWD/favicon-64.png
	rm -rf $PWD/favicon-128.png
	rm -rf $PWD/favicon-256.png

}

