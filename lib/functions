#!/bin/bash

# Create a base64 data URL from an image
dataurl() {
	echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Formats unix timestamp
function todate {
    perl -e "require 'ctime.pl'; print &ctime($1);"
}

# Creates fake file (0's) of $1 MB
function mkfake {
    perl -e "print '0' x 1024 x 1024 x $1" > $1-MB-fake-file.txt
}

# Creates new dir and cd's into it
function makeopen {
	mkdir $1 && cd $1
}

# Continue a download using curl ( args: from[src] - to[dst] )
function download {
	curl -L -o $2 -C - $1
}
# Trash file or dir to user .Trash
function saferm {
	mv -f "$@" ~/.Trash
}

# Copy file to clipboard
function copytoclipboard {
	cat $1 | pbcopy
}


# Favicon and Apple Touch Icon Generator
#
# This bash script takes an image as a parameter, and uses ImageMagick to convert it to several
# other formats used on modern websites. The following copies are generated:
#
# * apple-touch-icon-114x114-precomposed.png
# * apple-touch-icon-57x57-precomposed.png
# * apple-touch-icon-72x72-precomposed.png
# * apple-touch-icon-precomposed.png
# * apple-touch-icon.png
# * favicon.ico
#
# Concept from http://bergamini.org/computers/creating-favicon.ico-icon-files-with-imagemagick-convert.html
function appletouchicons {
	CONVERT_CMD=`which convert`
	SRC_IMAGE=$1
	PWD=`pwd`

	if [ -z $CONVERT_CMD ] || [ ! -f $CONVERT_CMD ] || [ ! -x $CONVERT_CMD ];
	then
	    echo "ImageMagick needs to be installed to run this script"
	    return;
	fi

	if [ -z $SRC_IMAGE ]; then
		echo "You must supply a source image as the argument to this command."
		return;
	fi

	if [ ! -f $SRC_IMAGE ]; then
	    echo "Source image \"$SRC_IMAGE\" does not exist."
	    return;
	fi

	echo "Generating square base image"
	$CONVERT_CMD $SRC_IMAGE -resize 256x256! -transparent white $PWD/favicon-256.png

	echo "Generating ico"
	$CONVERT_CMD $PWD/favicon-256.png -resize 32x32 $PWD/favicon.ico

	echo "Generating touch icons"

	$CONVERT_CMD $PWD/favicon-256.png -resize 57x57 $PWD/apple-touch-icon-57x57.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 114x114 $PWD/apple-touch-icon-114x114.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 72x72 $PWD/apple-touch-icon-72x72.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 144x144 $PWD/apple-touch-icon-144x144.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 60x60 $PWD/apple-touch-icon-60x60.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 120x120 $PWD/apple-touch-icon-120x120.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 76x76 $PWD/apple-touch-icon-76x76.png
	$CONVERT_CMD $PWD/favicon-256.png -resize 152x152 $PWD/apple-touch-icon-152x152.png

	echo "Removing temp files"
	rm -rf $PWD/favicon-256.png

}
